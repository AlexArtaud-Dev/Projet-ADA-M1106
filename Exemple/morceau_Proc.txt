-- vérification s'il y a une couleur ou pas 
    if ElemP.couleur /=  couleur then 
        Pieces(j) := False;
        Put_Line("la couleur est vide"); 
    else 
        Pieces(j) := True;
        Put_Line("la couleur n'est pas vide"); 
    end if;
-- fin de vérification de la couleur  

-- boucle de lecture des valeurs rouges
    while ElemP.couleur = rouge loop

        read(f, ElemP);
        y := y + 1;
    end loop;

    put("le nombre de pièce est :"); put(x);

    New_Line;
    put("le nombre d'élément rouge est :"); put(y);
    New_Line;


-- si la couleur rouge est atteinte alors on boucle jusqu'à la fin des valeurs rouges
if couleur = rouge then 
    Pieces(couleur) := true;
        while couleur = rouge loop
            Read(f, ElemP);
            nbelem := nbelem + 1;
            Grille(ElemP.ligne, ElemP.colonne) := ElemP.couleur;
            exit;
        end loop;

-- sinon on lit les valeurs qui sont vides 
else
    for z in Grille'Range loop
        Read(f,ElemP);
        Pieces(couleur) := false;
    end loop;
end if;


Grille(ElemP.ligne, ElemP.colonne) := ElemP.couleur;



-- if de vérification de de l'appartenance à l'intervalle 1..20
if nb in 1..20 then
-
-
-
-
else 
	Put_Line("le nombre ne fait pas partie de l'intervalle [1,20]");
	-- message de fin en cas de nb n'appartenant pas à l'intervalle



end if;
-- fin du if de vérification


E_ConsErr : exception;

exception
	when Constraint_Error =>
		Put("index impossible à trouver ");
		raise E_ConsErr;

    exception 
        when E_ConsErr => Put_Line("fin du programme");
        New_Line;



    procedure AfficheGrille(Grille : in TV_Grille) is
        package p_int_io is new Integer_IO(Integer); use p_int_io; 


    begin 
        ecrire_ligne("     A B C D E F G");
        ecrire_ligne("   S - - - - - - -");

        for i in Grille'range(1) loop
            
            ecrire(i); ecrire(" |");
            for j in Grille'range(2) loop
                if i mod 2 = 0 xor T_Col'Pos(j) mod 2 = 0 then 
                    ecrire("  "); 

                    elsif Grille(i,j) = vide then
                    ecrire(" .");

                else 
                    if i mod 2 /= 0 xor T_Col'Pos(j) mod 2 /= 0 then 
                       ecrire(" .");
                    
                    elsif Grille(i,j) = vide then
                        ecrire("  ");
                    
                    end if;

                end if;
            
                if Grille(i,j) = blanc then 
                    ecrire('f'); 
                
                else 
                    ecrire(T_Coul'Pos(Grille(i,j)));
                
                end if;

            end loop; 
            a_la_ligne;

        end loop;

    end AfficheGrille; 


                    if Grille(i,j) /= rouge and Grille(i,j) /= vide and Grille(i,j) /= blanc then
                          put(' '); Put(T_Coul'Pos(Grille(i,j)),1); Put("  ");

                    -- couleur rouge
                    elsif Grille(i,j) = rouge then
                    Put(" 0 "); Put(' '); 
                  

                    -- couleur vide  
                    elsif Grille(i,j) = blanc then
                            Put(" F "); Put(' '); 
                    
                    -- sans couleur
                    elsif Grille(i,j) = vide then
                        Put(" . "); Put(' ');

                    end if; 

  
                     -- couleur rouge
                    if Grille(i,j) /= rouge and Grille(i,j) /= vide and Grille(i,j) /= blanc then
                          put("    "); Put(T_Coul'Pos(Grille(i,j)),1);
                    
                    elsif GRille(i,j) = rouge then
                        Put("  "); Put("  0");

                  -- couleur blanche  
                    elsif  Grille(i,j) = blanc then 
                        Put("  "); Put("  F"); 
                    
                    -- sans couleur 
                    elsif  Grille(i,j) = vide then
                        Put("  "); Put("  ."); 
                        
                    end if; 
